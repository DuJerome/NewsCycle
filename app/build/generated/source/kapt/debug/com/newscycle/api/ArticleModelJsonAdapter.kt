// Code generated by moshi-kotlin-codegen. Do not edit.
package com.newscycle.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import java.util.Date
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class ArticleModelJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ArticleModel>() {
  private val options: JsonReader.Options = JsonReader.Options.of("source", "author", "title",
      "description", "url", "urlToImage", "publishedAt", "content")

  private val sourceAdapter: JsonAdapter<Source> = moshi.adapter(Source::class.java, emptySet(),
      "source")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "author")

  private val dateAdapter: JsonAdapter<Date> = moshi.adapter(Date::class.java, emptySet(),
      "pubDate")

  @Volatile
  private var constructorRef: Constructor<ArticleModel>? = null

  override fun toString(): String = buildString(34) {
      append("GeneratedJsonAdapter(").append("ArticleModel").append(')') }

  override fun fromJson(reader: JsonReader): ArticleModel {
    var source: Source? = null
    var author: String? = null
    var title: String? = null
    var desc: String? = null
    var url: String? = null
    var image: String? = null
    var pubDate: Date? = null
    var content: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> source = sourceAdapter.fromJson(reader) ?: throw Util.unexpectedNull("source",
            "source", reader)
        1 -> {
          author = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          title = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          desc = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          url = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          image = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> pubDate = dateAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pubDate",
            "publishedAt", reader)
        7 -> {
          content = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<ArticleModel> = this.constructorRef ?:
        ArticleModel::class.java.getDeclaredConstructor(Source::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        Date::class.java, String::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        source ?: throw Util.missingProperty("source", "source", reader),
        author,
        title,
        desc,
        url,
        image,
        pubDate ?: throw Util.missingProperty("pubDate", "publishedAt", reader),
        content,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: ArticleModel?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("source")
    sourceAdapter.toJson(writer, value.source)
    writer.name("author")
    nullableStringAdapter.toJson(writer, value.author)
    writer.name("title")
    nullableStringAdapter.toJson(writer, value.title)
    writer.name("description")
    nullableStringAdapter.toJson(writer, value.desc)
    writer.name("url")
    nullableStringAdapter.toJson(writer, value.url)
    writer.name("urlToImage")
    nullableStringAdapter.toJson(writer, value.image)
    writer.name("publishedAt")
    dateAdapter.toJson(writer, value.pubDate)
    writer.name("content")
    nullableStringAdapter.toJson(writer, value.content)
    writer.endObject()
  }
}
