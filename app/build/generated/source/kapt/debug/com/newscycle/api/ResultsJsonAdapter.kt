// Code generated by moshi-kotlin-codegen. Do not edit.
package com.newscycle.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class ResultsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Results>() {
  private val options: JsonReader.Options = JsonReader.Options.of("status", "totalResults",
      "articles")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "status")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "len")

  private val listOfArticleModelAdapter: JsonAdapter<List<ArticleModel>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, ArticleModel::class.java),
      emptySet(), "articles")

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Results").append(')') }

  override fun fromJson(reader: JsonReader): Results {
    var status: String? = null
    var len: Int? = null
    var articles: List<ArticleModel>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> status = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status",
            "status", reader)
        1 -> len = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("len", "totalResults",
            reader)
        2 -> articles = listOfArticleModelAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("articles", "articles", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Results(
        status = status ?: throw Util.missingProperty("status", "status", reader),
        len = len ?: throw Util.missingProperty("len", "totalResults", reader),
        articles = articles ?: throw Util.missingProperty("articles", "articles", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: Results?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("status")
    stringAdapter.toJson(writer, value.status)
    writer.name("totalResults")
    intAdapter.toJson(writer, value.len)
    writer.name("articles")
    listOfArticleModelAdapter.toJson(writer, value.articles)
    writer.endObject()
  }
}
